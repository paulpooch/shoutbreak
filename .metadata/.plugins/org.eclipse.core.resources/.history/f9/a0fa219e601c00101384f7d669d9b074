package com.shoutbreak;

import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.shoutbreak.service.CellDensity;
import com.shoutbreak.service.ErrorManager;
import com.shoutbreak.service.User;
import com.shoutbreak.ui.CustomMapView;
import com.shoutbreak.ui.UserLocationOverlay;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.Color;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class ShoutbreakUI extends MapActivity {
	// TODO: bundle saved instance... restore state from that
	
	protected ShoutbreakUI _ui;
	protected Context _context;
	protected User _user;
	
	// keyboard
	protected InputMethodManager _inputMM;
	
	// UI controls

	protected CustomMapView _cMapView;

	
	protected UserLocationOverlay _userLocationOverlay;
	protected MapController _mapController;
	
	protected NotificationManager _notificationManager;

	///////////////////////////////////////////////////////////////////////////
	// LIFECYCLE METHODS
	///////////////////////////////////////////////////////////////////////////
	
	/** Called when the activity is first created. */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		_ui = this;
		_user = null;
		_context = getApplicationContext();
		_inputMM = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
		
		Display display = ((WindowManager) getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
		DisplayMetrics metrics = new DisplayMetrics();
		display.getMetrics(metrics);
		int h = metrics.heightPixels;
		int w = metrics.widthPixels;
		int h16 = (int)h/16;
		int h8 = 2 * h16;
		int tabWidth = (int)w / 3;
		
	

		_cMapView = (CustomMapView)findViewById(R.id.cmvMap);
	

		
		_mapController = _cMapView.getController();
		
		_notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
		
		// Setup User
		ShoutbreakApplication app = (ShoutbreakApplication)this.getApplication();
		if (_user == null) {
			_user = app.getUser(_context);
		}
		
		//Log.e("USER", "USER: " + _user.getAuth());
		
		
		



		
		initMap();

	}
	
	@Override
	protected void onStart() {
		super.onStart();
	}
	
	@Override
	protected void onResume() {
		super.onResume();		
		// we disable/enable to be nice to user battery
		_userLocationOverlay.enableMyLocation();

		// this should go last.. let ui render

	}
	
	@Override
	protected void onPause() {
		super.onPause();
		// we disable/enable to be nice to user battery
		_userLocationOverlay.disableMyLocation();
	}
	
	
	@Override
	protected void onStop() {
		super.onStop();
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();

		Log.d(getClass().getSimpleName(), "onDestroy");
	}
	
	///////////////////////////////////////////////////////////////////////////
	// END LIFECYCLE METHODS
	///////////////////////////////////////////////////////////////////////////
	
	protected void initMap() {
		_userLocationOverlay = new UserLocationOverlay(this, _cMapView);
		_mapController.setZoom(Vars.DEFAULT_ZOOM_LEVEL);
		_cMapView.setClickable(true);
		_cMapView.setEnabled(true);
		_cMapView.setUI(this);
		_cMapView.setUserLocationOverlay(_userLocationOverlay);
		_cMapView.getOverlays().add(_userLocationOverlay);
		_cMapView.postInvalidate();
		
	}
	
	@Override
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return false;
	}	
	
	public User getUser() {
		return _user;
	}
	
	public void tempNotify(String alert, String title, String message) {
		Intent intent = new Intent(this, ShoutbreakUI.class);
	    Notification notification = new Notification(R.drawable.icon, alert, System.currentTimeMillis());
	    notification.setLatestEventInfo(this, title, message,
	    		PendingIntent.getActivity(this.getBaseContext(), 0, intent, PendingIntent.FLAG_CANCEL_CURRENT));
	    _notificationManager.notify(Vars.APP_NOTIFICATION_ID, notification);
	}
	
	
	
	
	


	/**
	 * This implementation is used to receive callbacks from the remote service.
	 */
	protected IShoutbreakServiceCallback _shoutbreakServiceCallback = new IShoutbreakServiceCallback.Stub() {
		/**
		 * This is called by the remote service regularly to tell us about new
		 * values. Note that IPC calls are dispatched through a thread pool
		 * running in each process, so the code executing here will NOT be
		 * running in our main thread like most other things -- so, to update
		 * the UI, we need to use a Handler to hop over there.
		 */		
		public void serviceEventComplete(int serviceEventCode) {
			switch (serviceEventCode) {
				case Vars.SEC_UI_RECONNECT_COMPLETE: {
					// we can do stuff here if we want
					// only called if UI is launched when service was already running
					break;
				}
				case Vars.SEC_SHOUT_SENT: {
					giveNotice("shout successful");
					_cShoutText.setText("");
					break;
				}
				case Vars.SEC_RECEIVE_SHOUTS: {
					CellDensity cellDensity = _user.getCellDensity();
					_userLocationOverlay.setPopulationDensity(cellDensity.density);
					int newShouts = _user.getShoutsJustReceived();
					if (newShouts > 0) {
						String notice = "just heard " + newShouts + " new Shout";
						if (newShouts > 1) {
							notice += "s"; // plural is dumb
						}
						giveNotice(notice);
					}
				}
				case Vars.SEC_VOTE_COMPLETED: {
					_user.getInbox().refresh();
				}
			}
		}
	};

	class ShoutbreakServiceConnection implements ServiceConnection {

		public void onServiceConnected(ComponentName className, IBinder boundService) {
			
			_service = IShoutbreakService.Stub.asInterface((IBinder) boundService);

			// We want to monitor the service for as long as we are
			// connected to it.
			try {
				_service.registerCallback(_shoutbreakServiceCallback);
			} catch (RemoteException e) {
				// In this case the service has crashed before we could even
				// do anything with it; we can count on soon being
				// disconnected (and then reconnected if it can be restarted)
				// so there is no need to do anything here.
			}
			Log.d(getClass().getSimpleName(), "onServiceConnected()");

		}

		public void onServiceDisconnected(ComponentName className) {
			_service = null;
			Log.d(getClass().getSimpleName(), "onServiceDisconnected");
		}

	}

}